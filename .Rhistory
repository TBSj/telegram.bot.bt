load_all
library(devtools)
load_all()
use_r_profile()
use_mit_license()
library(telegram.bot.dt)
use_article("how-to-do-stuff", "How to do stuff")
library(telegram.bot.dt)
use_package_doc()
use_package_doc()
use_package_doc()
library(telegram.bot.dt)
use_r_profile()
if (interactive()) {
require("devtools", quietly = TRUE)
# automatically attaches usethis
}
use_git()
library(devtools)
use_readme_rmd()
library(telegram.bot.dt)
devtools::load_all(".")
load_all()
load_all()\
load_all()
load_all()
devtools::load_all(".")
library(telegram.bot.dt)
use_readme_rmd()
load_all()
library(telegram.bot.dt)
library(telegram.bot.dt)
library(telegram.bot.dt)
library(telegram.bot.dt)
use_test()
library(devtools)
use_test()
use_vignette()
test_check("telegram.bot.dt")
library(telegram.bot)
detach("package:telegram.bot", unload = TRUE)
load_all()
load_all()
package::object()
package::object()
load_all()
load_all(path = 'R/')
load_all(path = 'man/')
load_all(path = 'man')
document()
document()
library(telegram.bot.dt)
devtools::document()
type = 'document'
id=3
InlineQueryResult <- c(
list(
type = as.character(type),
id = as.character(id)
)
# params
)
InlineQueryResult
structure(InlineQueryResult, class = "InlineQueryResult")
InlineQueryResult
devtools::document()
InlineQueryResult
c(
list(
type = as.character(type),
id = as.character(id)
),
params
) %>%
as.data.frame()
as.data.frame(InlineQueryResult)
devtools::document()
